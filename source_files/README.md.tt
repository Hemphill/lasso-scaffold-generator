# <%= @plural_name.titleize %>

We have two basic objects (Lasso Custom Types) for managing and displaying <%= @plural_name %>. We have a `<%= @namespace  %>_<%= @plural_name %>`
object which finds, houses, manages, and displays collections of <%= @singular_name %> objects. We also have a `<%= @namespace  %>_<%= @singular_name %>`
object which houses, manages, and displays a single <%= @singular_name %> object.

The idea is: we have one object that controls all the behavior and viewing of a <%= @singular_name %>. We have a second
object that manages selecting and controlling collections of <%= @plural_name %>.

First we will cover the <%= @singular_name %> object as it is a more basic building block and then move on to the <%= @plural_name %>
collection object.


## <%= @singular_name.titleize %> Object

To use the `<%= @namespace  %>_<%= @singular_name %>` object you first want to initialize it by setting a variable to
the `<%= @namespace  %>_<%= @singular_name %>` type.

```
var( '<%= @singular_name %>' = <%= @namespace  %>_<%= @singular_name %> );
```

We can't do much with that because it's not bound to a <%= @singular_name %>. If we know the `id` of a <%= @singular_name %>
we'd like to use we can use the `find` method as follow.

```
$<%= @singular_name %>->find(123);
```

The `find` method will query the API for the <%= @singular_name %>, and completely setup the object with data.

Even better if we know the <%= @singular_name %>'s `id` up front we can feed it to the object when we create it.

```
var( '<%= @singular_name %>' = <%= @namespace  %>_<%= @singular_name %>(123) );
```

### <%= @singular_name.titleize %> Attributes

| Name <%= spacer(4, @largest_name) %> | Type    | Default | Description |
|-------<%= spacer(4, @largest_name, '-') %>|---------|---------|-------------|
<%= attributes_specs(@attributes) %>

### Internal State Attributes

| Name          | Type    | Default | Description |
|---------------|---------|---------|-------------|
| `loaded`      | boolean | false   | Indicates if the object data has been loaded from the data source. |
| `error`       | string  | blank   | A consumer friendly error message. |
| `lasso_error` | string  | blank   | Lasso's internal error message, not consumer friendly. |

---

### Methods

Public member methods. We don't define private methods here because we don't expect you to access them in normal usage.

#### onCreate

This it triggered automatically when the `<%= @namespace  %>_<%= @singular_name %>` object is created.

##### Usage Examples

If you already know the `id` of the <%= @singular_name %>.

```
var( '<%= @singular_name %>' = <%= @namespace  %>_<%= @singular_name %>(123) );
```

If you don't know the `id` of the <%= @singular_name %> yet, or plan on using the `load_fields` method.

```
var( '<%= @singular_name %>' = <%= @namespace  %>_<%= @singular_name %> );
```

---

#### The `find` Method

The `find` method accepts the <%= @singular_name %>'s `id`, looks up the <%= @singular_name %> and sets up all relevant information.

##### Examples

Basic usage: when you have an existing `<%= @namespace  %>_<%= @singular_name %>` object assigned to a variable named `<%= @singular_name %>`.

```
$<%= @singular_name %>->find(123);
```

If you are creating a new `<%= @namespace  %>_<%= @singular_name %>` object you can supply the <%= @singular_name %> `id` and it
will call the `find` method internally. As follows.

```
var( '<%= @singular_name %>' = <%= @namespace  %>_<%= @singular_name %>(123) );
```

Which is equivalent to:

```
var( '<%= @singular_name %>' = <%= @namespace  %>_<%= @singular_name %> );

$<%= @singular_name %>->find(123);
```

##### Parameter

| Name | Type    | Description |
|------|---------|-------------|
| `id` | Integer | <%= @singular_name.titleize %> unique id |

---

#### The `load_fields` Method

When creating several `<%= @namespace  %>_<%= @singular_name %>` objects you will often want to perform an inline search
and set a `<%= @namespace  %>_<%= @singular_name %>` object for each record found.

##### Basic Usage Example

```
$<%= @singular_name %>->load_fields;
```

Parameters: none. _Expects the existence of database fields for every <%= @singular_name %> attribute._

##### Expanded Usage Example

```
var('<%= @plural_name %>' = <%= @namespace + '_' + @plural_name %>);
inline(-search ... );
  records;
    local('<%= @singular_name %>' = <%= @namespace + '_' + @singular_name %>);
    #<%= @singular_name %>->load_fields;
    $<%= @plural_name %>->'<%= @plural_name %>'->insert(#<%= @singular_name %>);
    $<%= @plural_name %>->'loaded' = true;
  /records;
/inline;
```

Parameters: none. _Expects the existence of database fields for every <%= @singular_name %> attribute._

The above example makes one query to the database, gets the data for a bunch of
`<%= @namespace + '_' + @singular_name %>` objects, creates those objects, and stores them in a collection object
(`<%= @namespace + '_' + @plural_name %>`). Alternatively we could have used the `find` method (`#<%= @singular_name %>->find(field('id'));`),
but that would perform an additional database query for **every** <%= @singular_name %> we found in our initial inline.
With the `load_fields` method we only make the one query, which can be much faster with large data sets.

---

#### The `create` Method

The `create` method will create a new record in the database. It will persist all of the object's attribute
data to the database. This method accepts **all** <%= @singular_name %> attributes as parameters.

Basic usage: when you have an existing `<%= @namespace  %>_<%= @singular_name %>` object assigned to a variable named `<%= @singular_name %>`.

```
$<%= @singular_name %>->create;
```

Parameters: This method accepts all <%= @singular_name %> attributes as parameters. See the <%= @singular_name.titleize %> Attributes
section above for a complete list of parameters available.

---

#### The `update` Method

The `update` method will update an existing record in the database. It will persist all of the object's attribute
data to the database. This method accepts **all** <%= @singular_name %> attributes as parameters.

Basic usage: when you have an existing `<%= @namespace  %>_<%= @singular_name %>` object assigned to a variable named `<%= @singular_name %>`.

```
$<%= @singular_name %>->update;
```

Parameters: This method accepts all <%= @singular_name %> attributes as parameters. See the <%= @singular_name.titleize %> Attributes
section above for a complete list of parameters available.

---

#### The `save` Method

The `save` method will persist the <%= @singular_name %> object to the database.

The `save` method will determine if the object represents a record currently stored in the database or is a new record.
If the record already exists in the database it will run the `update` method (see above), or if the object represents a
new record in the database it will run the `create` method (see above). _The `save` method basis it's decision to run
`create` vs `update` based on if a value is stored in the `id` attribute or not._

Basic usage: when you have an existing `<%= @namespace  %>_<%= @singular_name %>` object assigned to a variable named `<%= @singular_name %>`.

```
$<%= @singular_name %>->save;
```

Parameters: This method accepts all <%= @singular_name %> attributes as parameters. See the <%= @singular_name.titleize %> Attributes
section above for a complete list of parameters available.

---

#### The `render` Method

The `render` method will check if data has been loaded into the object, and if it has will return the HTML of the object
to display on a web page. The `/<%= @plural_name %>/display/<%= @singular_name %>.inc` file is used as the source of the
HTML. The CSS and JavaScript for this object will already be included on the web page as part of our Core Styles framework.

Basic usage: when you have an existing `<%= @namespace  %>_<%= @singular_name %>` object assigned to a variable named
`<%= @singular_name %>`.

```
$<%= @singular_name %>->render;
```

Parameters: none.

---


## <%= @plural_name.titleize %> Object

The `<%= @namespace  %>_<%= @plural_name %>` object finds, stores, manages, and displays collections of <%= @singular_name %>
(`<%= @namespace  %>_<%= @singular_name %>`) objects.

### <%= @singular_name.titleize %> Attributes

| Name <%= spacer(4, @largest_plural_name) %> | Type    | Default | Description |
|-------<%= spacer(4, @largest_name, '-') %>|---------|---------|-------------|
| `<%= @plural_name %>`<%= spacer(@plural_name.size, @largest_plural_name) %>| array   |         | A collection of `<%= @namespace  %>_<%= @singular_name %>` objects. |
<%= attributes_specs(@plural_attributes, @largest_plural_name, @largest_plural_default) %>

### Internal State Attributes

| Name     | Type    | Default | Description |
|----------|---------|---------|-------------|
| `loaded` | boolean | false   | Indicates if the object data has been loaded from the data source. |
| `error`  | string  | blank   | A consumer friendly error message. |
| `limit`  | string  | blank   | Places a limit on the number of records returned. |

---


### Methods

Public member methods. We don't define private methods here because we don't expect you to access them in normal usage.


#### The `all` Method

The `all` method will query the database for all <%= @plural_name %> records. It will create a `<%= @namespace  %>_<%= @singular_name %>`
object for each record found, and store them in the `<%= @plural_name %>` attribute.

```
$<%= @plural_name %>->all;
```

Parameters: none.

---

#### The `query` Method

The `query` method will query the database for <%= @plural_name %> records. It accepts two parameters, the name of the
database field to search against, and an array of values to search for. It will create a `<%= @namespace  %>_<%= @singular_name %>`
object for each record found, and store them in the `<%= @plural_name %>` attribute.

```
$<%= @plural_name %>->query( -field='id', -values=array(1,2,3) );
```

##### Parameter

| Name     | Type    | Description |
|----------|---------|-------------|
| `field`  | string  | The name of the database field to search. |
| `values` | array   | The data to search for. |

---

#### The `render` Method

The `render` method will check if data has been loaded into the object, if so, it will return the HTML for each of the
of the object `<%= @namespace  %>_<%= @singular_name %>` objects stored in the `<%= @plural_name %>` attribute to display on a web page.

It uses the `/<%= @plural_name %>/display/<%= @plural_name %>.inc` file as the source of the HTML layout.

Basic usage: when you have an existing `<%= @namespace  %>_<%= @singular_name %>` object assigned to a variable named
`<%= @plural_name %>`.

```
$<%= @plural_name %>->render;
```

Parameters: none.

---

